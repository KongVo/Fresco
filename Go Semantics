Try it Out - Find the length of a String 'FrescoPlay'


package main
import ("fmt"
       "bufio"
       "os")
func main() {
    //Enter your code here. Read input from STDIN. Print output to STDOUT
    var reader = bufio.NewReader(os.Stdin)
    message, _ := reader.ReadString('\n')
    
    length :=len(message)
    fmt.Println(length)
    
}



Try it Out - Program to check a number to be Pythagorean Prime


package main  
import (  
 "fmt"  
)  
func CheckPrime(number int) {  
 
 if number == 0 || number == 1 || number < 1 || number >= 100{  
  fmt.Println("FALSE")  
 } else {  
   if number%4 == 1{  
   fmt.Println("TRUE")  
  } else{
      fmt.Println("FALSE")  
  }
 
 }  
 
}  
func main() {  
    var num int
     fmt.Scan(&num)
     CheckPrime(num)  
}  


Try it Out - Write a Go program to map elements , retrieve and delete them

package main
import "fmt"
func main() {
   x := make(map[string]string)
    x["H"] = "Hydrogen"
    x["He"] = "Helium"
    x["Li"] = "Lithium"
    x["B"] = "Boron"
    x["Be"] = "Beryllium"
 
    findLi := x["Li"]
    fmt.Println(findLi)
    findB := x["B"]
    fmt.Println("Before deletion:", findB)
    delete(x, "B")
    
    findB2 := x["B"]  
    
    fmt.Println("After deletion:", findB2)
}


Try it Out - Create a Program for Slicing


package main
import "fmt"
func main() {
   
    var ele rune
    var size int
    var sli = make([]int,0,1)
    size = cap(sli)
    for i:=0; i<=size; i++{
        if i>=len(sli){
            size=size+1
        }
        ele = 0
           fmt.Scan(&ele)
        if ele==0 {
            //fmt.Println("Stop")
            break
        }
        sli = append(sli, int(ele))
    }
    
    sli = sli[1:]
    
        var sumOdd int
        var sumEven int
        var sumTotal int
        for i, _ := range sli {
            if i%2 != 0 {
                sumOdd = sli[i] + sumOdd
                
            }else
            {
                sumEven = sli[i] + sumEven
            }
        }
        sumTotal = sumEven - sumOdd

        fmt.Println(sumEven)
        fmt.Println(sumOdd)
        fmt.Println(sumTotal)
    }



Try it Out - Narcissistic number using GO

package main
import "fmt"
func main() {
    var n int
    _, err := fmt.Scanln(&n)
    if err != nil || n < 0 {
        fmt.Println("False")
        return
    }
    digits := 0
    for m := n; m > 0; m /= 10 {
        digits++
    }
    sum := 0
    for m := n; m > 0; m /= 10 {
        digit := m % 10
        pow := 1
        for i := 1; i <= digits; i++ {
            pow *= digit
        }
        sum += pow
    }
    if sum == n {
        fmt.Println("True")
    } else {
        fmt.Println("False")
    }
}




Try it Out - Variadic function

package main
import "fmt"
func main() {
   
    var ele rune
    var size int
    var sli = make([]int,0,1)
    size = cap(sli)
    for i:=0; i<=size; i++{
        if i>=len(sli){
            size=size+1
        }
        ele = 0
        fmt.Scan(&ele)
        if ele==0 {
            //fmt.Println("Stop")
            break
        }
        sli = append(sli, int(ele))
    }
    
    sli = sli[1:]
    
    sum(sli...)
    }
    
func sum(nums ...int) {
     total := 0
    for _, num := range nums {
        total += num
    }
    fmt.Println(total)
}




Try it Out- Swap 2 Numbers

package main
import (
    "fmt"
)
func main() {
    //Enter your code here. Read input from STDIN. Print output to STDOUT
    var num int
    fmt.Scan(&num)
    
    var num2 int
    fmt.Scan(&num2)
    num2, num := num, num2
  
    fmt.Println(num)
    fmt.Println(num2)
}





Try it Out - Structs and Interface


package main
import (
    "fmt"
    "math"
    )
//Interface declaration
type shape interface {
    area() float64
    perimeter() float64
}
//Struct declaration for rectangle
type rectangle struct{
  length, height float64
}
//Struct declaration for circle
type circle struct{
  radius float64
}
//Method declarations for rectangle
func (r rectangle) area() float64 {
    return r.length * r.height
}
func (r rectangle) perimeter() float64 {
    return 2 * r.length + 2 * r.height
}
//Method declarations for circle
func (c circle) area() float64 {
    return math.Pi * c.radius * c.radius
}
func (c circle) perimeter() float64 {
    return 2 * math.Pi * c.radius
}
func main() {
    var num float64
    var num1 float64
    var num2 float64
    
    fmt.Scan(&num)
    fmt.Scan(&num1)
    fmt.Scan(&num2)
    r := rectangle{length: num, height: num1}
    c := circle{radius: num2}
    fmt.Println(r.area())
    fmt.Println(r.perimeter())
    fmt.Println(c.area())
    fmt.Println(c.perimeter())
}
