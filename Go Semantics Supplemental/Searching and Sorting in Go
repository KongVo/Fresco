//1. Sorting in Go

package main
import "fmt"
func partition(lo int, piv int, arr []int) int {
	is := lo
	for i := lo; i < piv; i++ {
		if arr[i] < arr[piv] {
			if i != is {
				arr[i], arr[is] = arr[is], arr[i]
			}
			is++
		}
	}
	arr[is], arr[piv] = arr[piv], arr[is]
	print(arr)
	if is-1 > lo {
		partition(lo, is-1, arr)
	}
	if is+1 < piv {
		partition(is+1, piv, arr)
	}
	return is
}
func quickSort(arr []int) []int {
	l := len(arr)
	piv := l - 1
	partition(0, piv, arr)
	return arr
}
func main() {
	var n int
	fmt.Scan(&n)
	arr := make([]int, n)
	for i := 0; i < n; i++ {
		fmt.Scan(&arr[i])
	}
	fmt.Println(quickSort(arr))
}


//2. Search and Displaying the Index of Search Element

		package main
		import "fmt"
		func main() {
		    var sersize, i, search int
		    fmt.Scan(&sersize)
		    
		    serArr := make([]int, sersize)
		    for i = 0; i < sersize; i++ {
		        fmt.Scan(&serArr[i])
		    }
		    fmt.Scan(&search)
		
		    flag := 0
		    for i = 0; i < sersize; i++ {
		        if serArr[i] == search {
		            flag = 1
		            break
		        }
		    }
		    if flag == 1 {
		        fmt.Println(i)
		    } else {
		        fmt.Println(-1)
		    }
}